package com.oop.Lab4.Task1;


import java.io.File;
import java.net.URL;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class Expression {
    public static String ReadFromFile(File myObj)
    {
        String data = null;
        try
        {
            Scanner myReader = new Scanner(myObj);
            while (myReader.hasNextLine()) {
                data = myReader.nextLine();
                data = data.replaceAll("\\s+", ""); // eliminates blank spaces
            }
            myReader.close();
        }
        catch (FileNotFoundException e)
        {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        return data;
    }

    public static void main(String[] args) {
        int state = 0;
        URL url = Expression.class.getResource("one_expression.txt");
        File myObj = new File(url.getPath());
        String s = ReadFromFile(myObj);
        Queue1 q = new Queue1();
        for (char c : s.toCharArray()) {
            if (c == '(') q.push(c);
            else
                if (c ==')')
                    if (!q.isEmpty()) q.pop();
                    else
                    {
                        System.out.println("Parentheses are put incorrect");
                        state = 1;
                    }
        }
        if (q.isEmpty() && (state == 0)) System.out.println("Parentheses are put correct");
        else System.out.println("Parentheses are put incorrect");

    }
}

2 * 4 + (3 +6 * 9 -    12 * (2*9 - 15))  + 2 +(-4)*((2 - 15))
package com.oop.Lab4.Task1;

public class Queue1 {
    private Node1 front;		// front points to front element in the queue (if any)
    private Node1 last;		// rear points to last element in the queue
    public int Size;
    private int capacity;
    private class Node1 {
       char data1;
        Node1 next;
    }

    public Queue1()
    {
        front = null;
        last = null;
        Size = 0;
        capacity =0;
    }

    public boolean isEmpty()
    {
        return (Size == 0);
    }


    public void pop()
    {
        char data = front.data1;
        front= front.next;
        if (isEmpty())
        {
            last = null;
        }
        Size--;
    }


    public void push(char data)
    {
        Node1 oldRear = last;
        last = new Node1();
        last.data1 = data;
        last.next = null;
        if (isEmpty())
        {
            front = last;
        }
        else  {
            oldRear.next = last;
        }
        Size++;
    }
}
